---------------------
Three types of memory
---------------------
| Static | -> allocated when program starts and remains in existence until it terminates. Scope limited to defining function.

| Automatic | -> Created when a function is called. Lifetime limited till function is executing.

| Dynamic | -> Allocated from heap and can be released. 

^Ref -> Table 1.1

xxxxxxxxxxxxx
xxxxxxxxxxxxx

--------
Pointers
--------

// A pointer variable contains the address in memory of another variable, object , or function. 

// Nothing inherent in a pointer indicates what type of data the pointer is referencing

xxxxxxxxxxxxx
xxxxxxxxxxxxx

-------
Lvalues
-------

// Lvalues refers to the operand found on the left side of the assignment operator.

// Lvalue refers to a storage location

// All lvalues are modifiable

xxxxxxxxxxxx
xxxxxxxxxxxx


---------------
Concept of NULL
---------------

// When NULL is assigned to a pointer it means the pointer points to nothing.

// Two null pointers will always be equal.

// The NULL macro is a constant integer zero cast to a pointer as follows:-
// #define NULL (((void *)0)

// ASCII NUL is defined as a byte containing all zeros

// NULL should not be used in contexts other than pointers

// A pointer to void is a general purpose pointer used to hold references to any data type.

// Pointers to void are used for data pointers, not function pointers.

// Both global and static pointers exist till the program terminates but static pointers' scope is limited to the block they are declared in.

xxxxxxxxxxxxx
xxxxxxxxxxxxx

----------------------
Pointer Size and Types
----------------------

// On most modern platforms, size of a pointer to data remains same regardless of type

// Size of a pointer to a function may differ from size of a pointer to data

// size_t -> safe type of sizes
    # ptrdiff_t diff = ptr2 - ptr1;
    # ^ The above would tell how many elements between the two pointers.
    # size_t is an unsigned int and represents max size of any object in C.
    # Format specifiers for printing are %u and %lu (long unsigned integer)

// ptrdiff_t -> To handle pointer arithmetic

// intptr_t and uintptr_t -> To store pointer addresses

// Avoid casting pointer to an int as in case of 64-bit pointers, the information will be lost if the integer was only four bytes.


xxxxxxxxxxxxx
xxxxxxxxxxxxx

----------------------
Constants and Pointers
----------------------

// A pointer to constant cannot modify the value it is referencing.

xxxxxxxxxxxxx
xxxxxxxxxxxxx

